   parser = argparse.ArgumentParser()

    parser.add_argument('--data_filename', type=str, default="./datasets/wdbc.csv",
                        help='data file')
    parser.add_argument('--map_size', type=tuple, default=(1079, 30),
                        help='size of map')
    parser.add_argument('--model_type', type=str, default="WBC",
                        help='choose a model')

    parser.add_argument('--x_latent_size', type=int, default=32,
                        help='size of input embedding')
    parser.add_argument('--rnn_size', type=int, default=32,
                        help='size of RNN hidden state')
    parser.add_argument('--mem_num', type=int, default=1,
                        help='size of sd memory')

    parser.add_argument('--neg_size', type=int, default=10,
                        help='size of negative sampling')
    parser.add_argument('--num_epochs', type=int, default=20,
                        help='number of epochs')
    parser.add_argument('--grad_clip', type=float, default=10.,
                        help='clip gradients at this value')
    parser.add_argument('--learning_rate', type=float, default=0.001,
                        help='learning rate')
    parser.add_argument('--decay_rate', type=float, default=1.,
                        help='decay of learning rate')
    parser.add_argument('--batch_size', type=int, default=20,
                        help='minbatch size')

    parser.add_argument('--model_id', type=str, default="3",
                        help='model id')
    parser.add_argument('--partial_ratio', type=float, default=1.0,
                        help='partial tuple evaluation')
    parser.add_argument('--eval', type=bool, default=True,
                        help='partial tuple evaluation')
    parser.add_argument('--pt', type=bool, default=False,
                        help='partial tuple evaluation')

    parser.add_argument('--gpu_id', type=str, default="0")
    args = parser.parse_args()

    os.environ["CUDA_VISIBLE_DEVICES"] = args.gpu_id

    if args.eval:
        evaluate()
    elif args.pt:
        ppretrain()
    else:
        train()